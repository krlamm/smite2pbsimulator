rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /users/{userId} {
      allow read, list: if request.auth != null;
      allow create: if request.auth.uid == userId;
      allow update: if request.auth.uid == userId;
    }

    match /friendRequests/{requestId} {
      allow read: if request.auth.uid == resource.data.recipientId || request.auth.uid == resource.data.senderId;
      allow create: if request.auth.uid == request.resource.data.senderId;
      allow update: if request.auth.uid == resource.data.recipientId;
      allow delete: if request.auth.uid in requestId.split('_');
    }

    match /friends/{friendshipId} {
      // For queries, allow reading if the user is a member of the friendship.
      allow read: if request.auth.uid in resource.data.members;
      // For direct access, allow create/delete if the user's UID is in the doc ID.
      allow create, delete: if request.auth.uid in friendshipId.split('_');
    }

    match /drafts/{draftId} {
      allow create: if request.auth != null;
      allow read: if true;
      allow update: if request.auth != null && (
        (
          (request.resource.data.blueTeamUser.uid == request.auth.uid && resource.data.blueTeamUser == null) ||
          (request.resource.data.redTeamUser.uid == request.auth.uid && resource.data.redTeamUser == null)
        ) ||
        (
          (resource.data.activeTeam == 'blue' && request.auth.uid == resource.data.blueTeamUser.uid) ||
          (resource.data.activeTeam == 'red' && request.auth.uid == resource.data.redTeamUser.uid)
        ) ||
        (
          request.auth.uid == resource.data.blueTeamUser.uid || request.auth.uid == resource.data.redTeamUser.uid
        )
      );
    }
  }
}
