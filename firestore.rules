rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /users/{userId} {
      allow read, list: if request.auth != null;
      allow create: if request.auth.uid == userId;
      allow update: if request.auth.uid == userId;
    }

    match /friendRequests/{requestId} {
      allow read: if request.auth.uid == resource.data.recipientId || request.auth.uid == resource.data.senderId;
      allow create: if request.auth.uid == request.resource.data.senderId;
      allow update: if request.auth.uid == resource.data.recipientId;
      allow delete: if request.auth.uid in requestId.split('_');
    }

    match /friends/{friendshipId} {
      // For queries, allow reading if the user is a member of the friendship.
      allow read: if request.auth.uid in resource.data.members;
      // For direct access, allow create/delete if the user's UID is in the doc ID.
      allow create, delete: if request.auth.uid in friendshipId.split('_');
    }

    match /drafts/{draftId} {
      allow create: if request.auth != null;
      allow read: if true; // Anyone can read a draft lobby/state

      // Allow updates under specific conditions
      allow update: if request.auth != null && (
        // The host can always update the draft (e.g., start it, change name)
        request.auth.uid == resource.data.hostId ||

        // Any authenticated user can join a team if it's not full
        (request.resource.data.teamA.players[request.auth.uid] != resource.data.teamA.players[request.auth.uid] && resource.data.teamA.players.size() < 5) ||
        (request.resource.data.teamB.players[request.auth.uid] != resource.data.teamB.players[request.auth.uid] && resource.data.teamB.players.size() < 5) ||
        
        // A player can become captain of their team
        (request.resource.data.teamA.captain != resource.data.teamA.captain && request.auth.uid in resource.data.teamA.players) ||
        (request.resource.data.teamB.captain != resource.data.teamB.captain && request.auth.uid in resource.data.teamB.players) ||

        // During the draft, the current player can make their pick/ban
        isPlayerTurn(resource.data)
      );
    }

    // Helper function to determine if it's the requesting user's turn
    function isPlayerTurn(draft) {
      let currentTurn = draft.pickOrder[draft.currentPickIndex];
      return draft.status != 'lobby' &&
             draft.status != 'complete' &&
             request.auth.uid == currentTurn.uid;
    }
  }
}
