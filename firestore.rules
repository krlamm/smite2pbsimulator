rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /users/{userId} {
      allow read, list: if request.auth != null;
      allow create: if request.auth.uid == userId;
      allow update: if request.auth.uid == userId;
    }

    match /friendRequests/{requestId} {
      allow read: if request.auth.uid == resource.data.recipientId || request.auth.uid == resource.data.senderId;
      allow create: if request.auth.uid == request.resource.data.senderId;
      allow update: if request.auth.uid == resource.data.recipientId;
      allow delete: if request.auth.uid in requestId.split('_');
    }

    match /friends/{friendshipId} {
      // For queries, allow reading if the user is a member of the friendship.
      allow read: if request.auth.uid in resource.data.members;
      // For direct access, allow create/delete if the user's UID is in the doc ID.
      allow create, delete: if request.auth.uid in friendshipId.split('_');
    }

    match /drafts/{draftId} {
      allow create: if request.auth != null;
      allow read: if true; // Anyone can read a draft lobby/state

      // Allow updates under specific conditions
      allow update: if request.auth != null && (
        // The host can always update the draft
        request.auth.uid == resource.data.hostId ||

        // A player can join a team if it's not full and they are not on the other team
        (
          !(request.auth.uid in resource.data.teamA.players) &&
          !(request.auth.uid in resource.data.teamB.players) &&
          request.auth.uid in request.resource.data.teamA.players &&
          resource.data.teamA.players.size() < 5
        ) ||
        (
          !(request.auth.uid in resource.data.teamB.players) &&
          !(request.auth.uid in resource.data.teamA.players) &&
          request.auth.uid in request.resource.data.teamB.players &&
          resource.data.teamB.players.size() < 5
        ) ||

        // A player can leave a team
        (
          request.auth.uid in resource.data.teamA.players &&
          !(request.auth.uid in request.resource.data.teamA.players)
        ) ||
        (
          request.auth.uid in resource.data.teamB.players &&
          !(request.auth.uid in request.resource.data.teamB.players)
        ) ||

        // A player can become or relinquish captain of their team
        (
          request.resource.data.teamA.captain != resource.data.teamA.captain &&
          (request.auth.uid in resource.data.teamA.players || resource.data.teamA.captain == request.auth.uid)
        ) ||
        (
          request.resource.data.teamB.captain != resource.data.teamB.captain &&
          (request.auth.uid in resource.data.teamB.players || resource.data.teamB.captain == request.auth.uid)
        ) ||

        // During the draft, the current player can make their pick/ban
        (
          resource.data.status != 'lobby' &&
          resource.data.status != 'complete' &&
          resource.data.pickOrder.size() > 0 &&
          request.auth.uid == resource.data.pickOrder[resource.data.currentPickIndex].uid
        )
      );
    }

    
  }
}
