rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isCurrentPlayerTurn(draft, auth) {
      let currentIndex = draft.currentPickIndex;
      let pickOrder = draft.pickOrder;
      let currentTeam = pickOrder[currentIndex].team;

      // Check a window of 5 potential picks
      return (pickOrder[currentIndex].uid == auth.uid) ||
            (currentIndex + 1 < pickOrder.size() && pickOrder[currentIndex + 1].team == currentTeam && pickOrder[currentIndex + 1].uid == auth.uid) ||
            (currentIndex + 2 < pickOrder.size() && pickOrder[currentIndex + 2].team == currentTeam && pickOrder[currentIndex + 2].uid == auth.uid) ||
            (currentIndex + 3 < pickOrder.size() && pickOrder[currentIndex + 3].team == currentTeam && pickOrder[currentIndex + 3].uid == auth.uid) ||
            (currentIndex + 4 < pickOrder.size() && pickOrder[currentIndex + 4].team == currentTeam && pickOrder[currentIndex + 4].uid == auth.uid);
    }

    match /users/{userId} {
      allow read, list: if request.auth != null;
      allow create: if request.auth.uid == userId;
      allow update: if request.auth.uid == userId;
    }

    match /friendRequests/{requestId} {
      allow read: if request.auth.uid == resource.data.recipientId || request.auth.uid == resource.data.senderId;
      allow create: if request.auth.uid == request.resource.data.senderId;
      allow update: if request.auth.uid == resource.data.recipientId;
      allow delete: if request.auth.uid in requestId.split('_');
    }

    match /friends/{friendshipId} {
      allow read: if request.auth.uid in resource.data.members;
      allow create, delete: if request.auth.uid in friendshipId.split('_');
    }

    match /drafts/{draftId} {
      allow create: if request.auth != null;
      allow read: if true;

      allow update: if request.auth != null && (
        request.auth.uid == resource.data.hostId ||
        (
          !(request.auth.uid in resource.data.teamA.players) &&
          !(request.auth.uid in resource.data.teamB.players) &&
          request.auth.uid in request.resource.data.teamA.players &&
          resource.data.teamA.players.size() < 5
        ) ||
        (
          !(request.auth.uid in resource.data.teamB.players) &&
          !(request.auth.uid in resource.data.teamA.players) &&
          request.auth.uid in request.resource.data.teamB.players &&
          resource.data.teamB.players.size() < 5
        ) ||
        (
          request.auth.uid in resource.data.teamA.players &&
          !(request.auth.uid in request.resource.data.teamA.players) &&
          request.auth.uid in request.resource.data.teamB.players &&
          resource.data.teamB.players.size() < 5
        ) ||
        (
          request.auth.uid in resource.data.teamB.players &&
          !(request.auth.uid in request.resource.data.teamB.players) &&
          request.auth.uid in request.resource.data.teamA.players &&
          resource.data.teamA.players.size() < 5
        ) ||
        (
          request.resource.data.teamA.captain != resource.data.teamA.captain &&
          (request.auth.uid in resource.data.teamA.players || resource.data.teamA.captain == request.auth.uid)
        ) ||
        (
          request.resource.data.teamB.captain != resource.data.teamB.captain &&
          (request.auth.uid in resource.data.teamB.players || resource.data.teamB.captain == request.auth.uid)
        ) ||
        (
          resource.data.status != 'lobby' &&
          resource.data.status != 'complete' &&
          resource.data.pickOrder.size() > 0 &&
          isCurrentPlayerTurn(resource.data, request.auth)
        )
      );
    }
  }
}
